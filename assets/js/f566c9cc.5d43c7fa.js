"use strict";(self.webpackChunkvkpr_docs=self.webpackChunkvkpr_docs||[]).push([[6772],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:2,sidebar_label:"Local Development",title:"Local Development",slug:"/provisioning/dev/local"},o="Local Development",l={unversionedId:"provisioning-guide/local-dev",id:"provisioning-guide/local-dev",title:"Local Development",description:"To start developing locally with VKPR it will be necessary to initialize a Kubernetes cluster to host our application.",source:"@site/docs/provisioning-guide/local-dev.md",sourceDirName:"provisioning-guide",slug:"/provisioning/dev/local",permalink:"/docs/provisioning/dev/local",draft:!1,editUrl:"https://github.com/vertigobr/vkpr-docs/edit/main/docs/provisioning-guide/local-dev.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Local Development",title:"Local Development",slug:"/provisioning/dev/local"},sidebar:"tutorialSidebar",previous:{title:"Using VKPR Values",permalink:"/docs/provisioning/values"},next:{title:"Cloud development",permalink:"/docs/provisioning/dev/cloud"}},s={},c=[{value:"Initializing the cluster from VKPR",id:"initializing-the-cluster-from-vkpr",level:3},{value:"Registry",id:"registry",level:4},{value:"How it works?",id:"how-it-works",level:3},{value:"Finalizing the cluster",id:"finalizing-the-cluster",level:3}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"local-development"},"Local Development"),(0,i.kt)("p",null,"To start developing locally with VKPR it will be necessary to initialize a Kubernetes cluster to host our application."),(0,i.kt)("h3",{id:"initializing-the-cluster-from-vkpr"},"Initializing the cluster from VKPR"),(0,i.kt)("p",null,"In VKPR there are two commands that are responsible for initializing the cluster:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vkpr infra up  \t"),(0,i.kt)("li",{parentName:"ul"},"vkpr infra start")),(0,i.kt)("p",null,"The difference between them is given by the decision tree that is initialized when using ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra start"),", allowing the change of values \u200b\u200bsuch as the default ports, number of worker nodes, among others."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr infra start\n? Type the HTTP listening port: 8000\n? Type the HTTPS listening port: 8001\n? Type the quantity of Worker Nodes: 3\n? Enable Volume Mount ? false\n? Enable Traefik ingress controller ? false\n==============================\nVKPR Local Infra Start Routine\nEnabled Traefik Ingress Controller: false\n...\n")),(0,i.kt)("admonition",{title:"Formula",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more about ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra start"),", click ",(0,i.kt)("a",{parentName:"p",href:"/docs/commands/infra/start"},"here"))),(0,i.kt)("p",null,"Utilizando ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra up")," o cluster ser\xe1 inicializado com os valores padr\xe3o"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr infra up\nAdded http_port by default: 8000\nAdded https_port by default: 8001\nAdded worker_nodes by default: 1\nAdded enable_volume by default: false\nAdded enable_traefik by default: false\n==============================\nVKPR Local Infra Start Routine\nEnabled Traefik Ingress Controller: false\n...\n")),(0,i.kt)("admonition",{title:"Formula",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more about ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra up"),", click ",(0,i.kt)("a",{parentName:"p",href:"/docs/commands/infra/up"},"here"))),(0,i.kt)("p",null,"After executing one of the previous commands, the cluster will be initialized and will be ready to receive an application"),(0,i.kt)("h4",{id:"registry"},"Registry"),(0,i.kt)("p",null,"Another difference is also the initialization of ",(0,i.kt)("inlineCode",{parentName:"p"},"k3d-registry.localhost")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"k3d-mirror.localhost")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra start"),". VKPR provides a registry to be used together with the cluster and a mirror registry that caches the downloaded images to compose the deployments, it is a stateless and highly scalable server-side application that stores and allows distributing pod images."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr infra start\n...\nINFO[0000] Starting Node 'k3d-registry.localhost'       \nINFO[0000] Successfully created registry 'k3d-registry.localhost' \n# You can now use the registry like this (example):\n# 1. create a new cluster that uses this registry\nk3d cluster create --registry-use k3d-registry.localhost:6000\n# 2. tag an existing local image to be pushed to the registry\ndocker tag nginx:latest k3d-registry.localhost:6000/mynginx:v0.1\n# 3. push that image to the registry\ndocker push k3d-registry.localhost:6000/mynginx:v0.1\n# 4. run a pod that uses this image\nkubectl run mynginx --image k3d-registry.localhost:6000/mynginx:v0.1\nINFO[0000] Creating node 'k3d-mirror.localhost'         \nINFO[0000] Successfully created registry 'k3d-mirror.localhost' \nINFO[0000] Starting Node 'k3d-mirror.localhost'         \nINFO[0000] Successfully created registry 'k3d-mirror.localhost' \n# You can now use the registry like this (example):\n# 1. create a new cluster that uses this registry\nk3d cluster create --registry-use k3d-mirror.localhost:6001\n# 2. tag an existing local image to be pushed to the registry\ndocker tag nginx:latest k3d-mirror.localhost:6001/mynginx:v0.1\n# 3. push that image to the registry\ndocker push k3d-mirror.localhost:6001/mynginx:v0.1\n# 4. run a pod that uses this image\nkubectl run mynginx --image k3d-mirror.localhost:6001/mynginx:v0.1\n...\n")),(0,i.kt)("h3",{id:"how-it-works"},"How it works?"),(0,i.kt)("p",null,"Through k3d, the entire structure of containers for kubernetes will be created, resulting in the creation of our local cluster that will have the name ",(0,i.kt)("inlineCode",{parentName:"p"},"k3d-vkpr-local")," where all VKPR applications will be installed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ kubectl config get-contexts\nCURRENT   NAME               CLUSTER            AUTHINFO                     NAMESPACE \n*         k3d-vkpr-local     k3d-vkpr-local     admin@k3d-vkpr-local \n")),(0,i.kt)("admonition",{title:"Formula",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"  To see local infrastructure commands, click ",(0,i.kt)("a",{parentName:"p",href:"/docs/commands/infra/start"},"here"))),(0,i.kt)("h3",{id:"finalizing-the-cluster"},"Finalizing the cluster"),(0,i.kt)("p",null,"Another very important VKPR command is ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra down"),", this command is responsible for closing the k8s cluster, deleting all resources created within the ",(0,i.kt)("inlineCode",{parentName:"p"},"k3d-vkpr-local")," cluster"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr infra down\nAdded delete_registry by default: false\n==============================\nVKPR Local Infra Stop Routine\n==============================\nINFO[0000] Deleting cluster 'vkpr-local'                \nINFO[0001] Deleting image volume 'k3d-vkpr-local-images'\n... \n")),(0,i.kt)("admonition",{title:"Formula",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To learn more about ",(0,i.kt)("inlineCode",{parentName:"p"},"vkpr infra down"),", click ",(0,i.kt)("a",{parentName:"p",href:"/docs/commands/infra/down"},"here"))))}d.isMDXComponent=!0}}]);