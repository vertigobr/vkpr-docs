"use strict";(self.webpackChunkvkpr_docs=self.webpackChunkvkpr_docs||[]).push([[8818],{3905:(e,o,a)=>{a.d(o,{Zo:()=>c,kt:()=>m});var t=a(7294);function n(e,o,a){return o in e?Object.defineProperty(e,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[o]=a,e}function i(e,o){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var o=1;o<arguments.length;o++){var a=null!=arguments[o]?arguments[o]:{};o%2?i(Object(a),!0).forEach((function(o){n(e,o,a[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(a,o))}))}return e}function s(e,o){if(null==e)return{};var a,t,n=function(e,o){if(null==e)return{};var a,t,n={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],o.indexOf(a)>=0||(n[a]=e[a]);return n}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],o.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=t.createContext({}),l=function(e){var o=t.useContext(d),a=o;return e&&(a="function"==typeof e?e(o):r(r({},o),e)),a},c=function(e){var o=l(e.components);return t.createElement(d.Provider,{value:o},e.children)},p={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},u=t.forwardRef((function(e,o){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(a),m=n,g=u["".concat(d,".").concat(m)]||u[m]||p[m]||i;return a?t.createElement(g,r(r({ref:o},c),{},{components:a})):t.createElement(g,r({ref:o},c))}));function m(e,o){var a=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=u;var s={};for(var d in o)hasOwnProperty.call(o,d)&&(s[d]=o[d]);s.originalType=e,s.mdxType="string"==typeof e?e:n,r[1]=s;for(var l=2;l<i;l++)r[l]=a[l];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3469:(e,o,a)=>{a.r(o),a.d(o,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var t=a(7462),n=(a(7294),a(3905));const i={sidebar_position:2,sidebar_label:"DigitalOcean",title:"DigitalOcean",slug:"/cloud-dev/digitalocean"},r=void 0,s={unversionedId:"provisioning-guide/cloud-dev/digitalocean",id:"provisioning-guide/cloud-dev/digitalocean",title:"DigitalOcean",description:"Provisionando com  DigitalOcean",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/provisioning-guide/cloud-dev/digitalocean.md",sourceDirName:"provisioning-guide/cloud-dev",slug:"/cloud-dev/digitalocean",permalink:"/pt/docs/cloud-dev/digitalocean",draft:!1,editUrl:"https://github.com/vertigobr/vkpr-docs/edit/main/docs/provisioning-guide/cloud-dev/digitalocean.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"DigitalOcean",title:"DigitalOcean",slug:"/cloud-dev/digitalocean"},sidebar:"tutorialSidebar",previous:{title:"AWS EKS",permalink:"/pt/docs/provisioning/dev/cloud/aws"},next:{title:"Okteto",permalink:"/pt/docs/provisioning/dev/cloud/okteto"}},d={},l=[{value:"Provisionando com  DigitalOcean",id:"provisionando-com--digitalocean",level:2},{value:"Iniciando o deploy",id:"iniciando-o-deploy",level:3},{value:"Derrubando o cluster",id:"derrubando-o-cluster",level:3}],c={toc:l};function p(e){let{components:o,...i}=e;return(0,n.kt)("wrapper",(0,t.Z)({},c,i,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"provisionando-com--digitalocean"},"Provisionando com  DigitalOcean"),(0,n.kt)("p",null,"Outra vantagem que o VKPR oferece \xe9 a possibilidade de provisionar, de forma an\xe1loga ao AWS EKS, utilizando a DigitalOcean como cloud provider, podemos executar o comando que ficara respons\xe1vel por criar um fork de nosso reposit\xf3rio com todas as dependencias necessarias para o provisionamento, uma branch contendo o nome de nosso cluster ser\xe1 criada contendo as informa\xe7\xf5es solicitadas na execu\xe7\xe3o do comando respons\xe1vel pelo provisionamento."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Fork VKPR repo",src:a(4770).Z,width:"1895",height:"946"})),(0,n.kt)("p",null,"Primeiro precisamos executar a f\xf3rmula ",(0,n.kt)("inlineCode",{parentName:"p"},"vkpr digitalocean cluster init")," respons\xe1vel por inicializar o cluster com nome, quantidade de n\xf3s desejados, vers\xe3o do kubernetes , tipo de instancia, dentre outras informa\xe7\xf5es questionadas na \xe1rvore de decis\xf5es da f\xf3rmula."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr digitalocean cluster init\n\n? Project location: user\n? Type the Cluster name: do-sample\n? Choose the K8s version: 1.22\n? Choose the K8s region: nyc1\n? Choose nodes instance type: s-2vcpu-2gb\n? Desired number of nodes: 2\n\n")),(0,n.kt)("p",null,"Ap\xf3s a execu\xe7\xe3o poderemos visualizar a s\xe9rie de informa\xe7\xf5es referentes a clonagem, bem como a cria\xe7\xe3o de um fork do reposit\xf3rio git do VKPR, onde est\xe3o armazenados todos os templates terraform que ser\xe3o executados para provisionar a infraestrutura."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"...\nSwitched to a new branch 'do-sample'\n[do-sample 7b0dae9] [VKPR] Initial configuration defaults.yml\n 1 file changed, 2 insertions(+), 2 deletions(-)\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (4/4), 374 bytes | 374.00 KiB/s, done.\nTotal 4 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: \nremote: To create a merge request for do-sample, visit:\nremote:   https://gitlab.com/repository/k8s-digitalocean/-/merge_requests/new?merge_request%5Bsource_branch%5D=do-sample\nremote: \nTo https://gitlab.com/repository/k8s-digitalocean.git\n * [new branch]      do-sample -> do-sample\nBranch 'do-sample' set up to track remote branch 'do-sample' from 'origin'.\n\n...\n")),(0,n.kt)("p",null,"Nesse momento ja podemos acompanhar a pipeline executando as steps de iniciais de provisionamento visitando a parte de CI/CD de nosso reposit\xf3rio recem criado, la poderemos visualizar as vari\xe1veis criadas pelo VKPR referentes a credenciais e dados sensiveis tudo com a maior preocupa\xe7\xe3o de prote\xe7\xe3o aos dados, tomamos como exemplo abaixo o reposit\xf3rio GitLab."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Gitlab pipeline",src:a(9148).Z,width:"1895",height:"946"})),(0,n.kt)("p",null,"Os dados solicitados na \xe1rvore de decis\xf5es esses ficam armazenados em config/defaults.yml na branch de nosso reposit\xf3rio rec\xe9m forkado."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Gitlab configs",src:a(9244).Z,width:"1895",height:"946"})),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"To learn more about the values \u200b\u200ballowed in ",(0,n.kt)("inlineCode",{parentName:"p"},"defaults.yml"),", click ",(0,n.kt)("a",{parentName:"p",href:"https://gitlab.com/vkpr/k8s-digitalocean"},"here"))),(0,n.kt)("h3",{id:"iniciando-o-deploy"},"Iniciando o deploy"),(0,n.kt)("p",null,"Assim ja poderemos iniciar a pipeline de deploy ou executar o comando ",(0,n.kt)("inlineCode",{parentName:"p"},"vkpr digitalocean cluster deploy")," referente ao deploy de nosso cluster."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr digitalocean cluster deploy\nFormula was successfully built!\nDeploy job started successfully\n")),(0,n.kt)("p",null,"Poderemos visualizar o arquivos de kubeconfig sendo gerado na parte de artefatos ao final da execu\xe7\xe3o da pipeline, por\xe9m o VKPR disp\xf5e de funcionalidades para a extra\xe7\xe3o deste arquivo. Executando o comando ",(0,n.kt)("inlineCode",{parentName:"p"},"vkpr digitalocean cluster kubeconfig"),"  o VKPR ser\xe1 cap\xe1z de extrair automaticamente o kubeconfig diretamente da pipeline de nossa infraestrutura rec\xe9m provisionada. "),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Para saber mais sobre o kubeconfig clique ",(0,n.kt)("a",{parentName:"p",href:"https://jamesdefabia.github.io/docs/user-guide/kubectl/kubectl_config/"},"aqui"))),(0,n.kt)("h3",{id:"derrubando-o-cluster"},"Derrubando o cluster"),(0,n.kt)("p",null,"Outro comando que o VKPR disponibiliza \xe9 o de destrui\xe7\xe3o do cluster provisionado atrav\xe9s dos passos anteriores. Com a execu\xe7\xe3o do comando ",(0,n.kt)("inlineCode",{parentName:"p"},"vkpr digitalocean cluster destroy")," ser\xe1 disparada a ultima etapa da pipeline de nosso reposit\xf3rio que ir\xe1 por abaixo toda a infraestrutura provisionada anteriormente."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"$ vkpr digitalocean cluster deploy\nFormula was successfully built!\nDestroy job started successfully\n")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Complete pipeline",src:a(4611).Z,width:"1895",height:"946"})))}p.isMDXComponent=!0},9244:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/images/configs-defaults-do-88d0b8e246f4476c082a772ff0a423f0.png"},4770:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/images/fork-repo-do-a937332c45602bd2d16246bb374d846d.png"},9148:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/images/initial-step-pipeline-do-b713313144b33b1a000cf45fc67fc623.png"},4611:(e,o,a)=>{a.d(o,{Z:()=>t});const t=a.p+"assets/images/pipeline-deploy-do-195c94b1346a93a315212c14f0e0baa1.png"}}]);